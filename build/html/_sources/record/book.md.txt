# 情報収集
## DevOps導入指南
### DevOpsとは
- Dev(開発)とOps(運用)が連携してビジネス価値を高めようとする働き方や文化
    - オーバーヘッドを解消して省力化することで速度と柔軟性を与える
    - 開発フローやチームビルディング、文化まで含める
- どうしてDevOpsが生まれたか
    - Agile開発による継続的な開発への変化
    - 継続的な開発により見えた運用の課題
- Agileによる継続的な開発
    - 継続的なインテグレーションツールなどが導入
    - 運用面での課題が残る
- 継続的な開発により見えた運用の課題
    - インフラチームがアプリを意識していない
    - 開発者側は非機能要件（モニタリング・冗長化・バックアップ）について蔑ろにする
    - 伝統的に開発と運用は対立構造になりやすい
        - 開発はビジネスのためにサービスに変化をもたらす
        - 運用は安定稼働のために変化を嫌う
        - しかし、運用であっても目的は安定稼働ではなく、ビジネスの向上である
        - 求められる姿は、変化によるリスクをツールと文化によって低減することである
    - ツール
        - インフラ自動化
        - バージョン管理
        - ビルドとデプロイの自動化
        - 設定ファイルによる機能の有効化無効化管理
    - 文化 
        - 尊重
        - 信頼
        - 失敗に対する前向きな姿勢
        - 非難しないこと
- 対策
    - スクラムチームにインフラも入る機能横断型チームになる
    - 混乱の壁（運用と開発の壁）を乗り越えて、お互いの領域に入って開発することが重要
    - そのためにアジャイルインフラを実現する方法として Infrastructure is code
        - 開発と運用は同じ場所で同じものを見ることが重要で、Iacを利用する
        - リポジトリの利用やブランチ運用が重要
- IaCとは
    - ツールによって定義ファイル通りに設定を行う
    - 継続的な開発によって見えてきた運用課題の解決手法の軸
    - 定義ファイルにより、インフラの構成と設定を宣言しているため、アプリエンジニアでもインフラ構築が可能になる
    - インフラの構成や設定をソフトウェアの領域に転換してソフトウェアの手法を適用できるようになる
    - バージョン管理やテストを適用できる
    - 学習コストは通常のプログラミングと比較して簡単




### 組織への導入方法
- DevOpsは開発や運用を効率化しプロダクトの価値を高める大きなチャンス
- 新しい組織やプロジェクト開始時はDevOpsを導入するチャンス。既存のルールがないことや決まった習慣がないのは重要
    - トップダウンでDevOpsの導入を促す
    - ボトムアップでDevOpsを啓蒙し必要性を訴える
- 新しい組織では後回しにされやすいのでトップダウンがおすすめ
- 既存の組織やプロジェクトにDevOpsを導入するのは壁がたくさんある
    - うまくいっている運用を変えるリスク
    - 属人的なプロセスによる導入の余地がない
- 既存の組織にDevOpsを導入するにはボトムアップでやっていくのが王道
    - 自分の見える範囲からDevOpsを導入していく
- DevOpsを導入する場合は、現状位置の把握とマイルストーンを決めておく（終わりなき旅は疲弊を生む）
    - 現状把握は明文化されていないプロセスの明文化
    - 作業の時間のグラフかなど
    - 真の課題を見出す
- 現状を把握したら、省略できるものやDevOpsで解決するべきものをピックアップする
- 解決できるものについてツールを導入しながら解決を目指す
- 導入によって得られた成果を測定し、全員にフィードバックする
- 成果も併せてメンバーにDevOpsの価値を啓蒙し、ボトムアップを進めていく

## システム運用アンチパターン
## Infrastructure as Code
